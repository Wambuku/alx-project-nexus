"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "./src/utils/api.ts":
/*!**************************!*\
  !*** ./src/utils/api.ts ***!
  \**************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getImageUrl: function() { return /* binding */ getImageUrl; },\n/* harmony export */   movieApi: function() { return /* binding */ movieApi; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* harmony import */ var _alternativeApis__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./alternativeApis */ \"./src/utils/alternativeApis.ts\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/next/dist/build/polyfills/process.js\");\n\n// Using OMDb API as primary (free, just needs API key)\nconst OMDB_API_KEY = process.env.NEXT_PUBLIC_OMDB_API_KEY;\nconst OMDB_BASE_URL = \"https://www.omdbapi.com\";\n// Backup: TMDB API\nconst TMDB_API_KEY = process.env.NEXT_PUBLIC_TMDB_API_KEY;\nconst TMDB_BASE_URL = \"https://api.themoviedb.org/3\";\n// Fallback to demo data if no API key\nconst DEMO_MOVIES = [\n    {\n        id: 1,\n        title: \"The Shawshank Redemption\",\n        overview: \"Two imprisoned men bond over a number of years, finding solace and eventual redemption through acts of common decency.\",\n        poster_path: \"/placeholder-movie.svg\",\n        backdrop_path: \"/placeholder-movie.svg\",\n        release_date: \"1994-09-23\",\n        vote_average: 9.3,\n        vote_count: 2500000,\n        genre_ids: [\n            18,\n            80\n        ],\n        adult: false,\n        original_language: \"en\",\n        original_title: \"The Shawshank Redemption\",\n        popularity: 95.5,\n        video: false\n    },\n    {\n        id: 2,\n        title: \"The Godfather\",\n        overview: \"The aging patriarch of an organized crime dynasty transfers control of his clandestine empire to his reluctant son.\",\n        poster_path: \"/placeholder-movie.svg\",\n        backdrop_path: \"/placeholder-movie.svg\",\n        release_date: \"1972-03-24\",\n        vote_average: 9.2,\n        vote_count: 1800000,\n        genre_ids: [\n            18,\n            80\n        ],\n        adult: false,\n        original_language: \"en\",\n        original_title: \"The Godfather\",\n        popularity: 92.1,\n        video: false\n    },\n    {\n        id: 3,\n        title: \"The Dark Knight\",\n        overview: \"When the menace known as the Joker wreaks havoc and chaos on the people of Gotham, Batman must accept one of the greatest psychological and physical tests.\",\n        poster_path: \"/placeholder-movie.svg\",\n        backdrop_path: \"/placeholder-movie.svg\",\n        release_date: \"2008-07-18\",\n        vote_average: 9.0,\n        vote_count: 2200000,\n        genre_ids: [\n            28,\n            18,\n            80\n        ],\n        adult: false,\n        original_language: \"en\",\n        original_title: \"The Dark Knight\",\n        popularity: 88.7,\n        video: false\n    },\n    {\n        id: 4,\n        title: \"Pulp Fiction\",\n        overview: \"The lives of two mob hitmen, a boxer, a gangster and his wife intertwine in four tales of violence and redemption.\",\n        poster_path: \"/placeholder-movie.svg\",\n        backdrop_path: \"/placeholder-movie.svg\",\n        release_date: \"1994-10-14\",\n        vote_average: 8.9,\n        vote_count: 1900000,\n        genre_ids: [\n            80,\n            18\n        ],\n        adult: false,\n        original_language: \"en\",\n        original_title: \"Pulp Fiction\",\n        popularity: 85.3,\n        video: false\n    },\n    {\n        id: 5,\n        title: \"Forrest Gump\",\n        overview: \"The presidencies of Kennedy and Johnson, the Vietnam War, and other historical events unfold from the perspective of an Alabama man.\",\n        poster_path: \"/placeholder-movie.svg\",\n        backdrop_path: \"/placeholder-movie.svg\",\n        release_date: \"1994-07-06\",\n        vote_average: 8.8,\n        vote_count: 2100000,\n        genre_ids: [\n            18,\n            10749\n        ],\n        adult: false,\n        original_language: \"en\",\n        original_title: \"Forrest Gump\",\n        popularity: 82.9,\n        video: false\n    },\n    {\n        id: 6,\n        title: \"Inception\",\n        overview: \"A thief who steals corporate secrets through dream-sharing technology is given the inverse task of planting an idea.\",\n        poster_path: \"/placeholder-movie.svg\",\n        backdrop_path: \"/placeholder-movie.svg\",\n        release_date: \"2010-07-16\",\n        vote_average: 8.7,\n        vote_count: 2000000,\n        genre_ids: [\n            28,\n            878,\n            53\n        ],\n        adult: false,\n        original_language: \"en\",\n        original_title: \"Inception\",\n        popularity: 89.4,\n        video: false\n    }\n];\n// Remove unused code\n\n// Create TMDB API instance\nconst tmdbApi = axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].create({\n    baseURL: TMDB_BASE_URL,\n    params: {\n        api_key: TMDB_API_KEY\n    }\n});\nconst movieApi = {\n    // Get trending movies - Try OMDb first, then TMDB, then demo data\n    getTrendingMovies: async ()=>{\n        // Try OMDb API first\n        if (OMDB_API_KEY) {\n            try {\n                const omdbMovies = await _alternativeApis__WEBPACK_IMPORTED_MODULE_0__.omdbApi.getTrendingMovies();\n                if (omdbMovies.length > 0) {\n                    console.log(\"Using OMDb API for trending movies\");\n                    return omdbMovies;\n                }\n            } catch (error) {\n                console.warn(\"OMDb API failed, trying TMDB...\");\n            }\n        }\n        // Fallback to TMDB\n        if (TMDB_API_KEY) {\n            try {\n                const response = await tmdbApi.get(\"/trending/movie/week\");\n                console.log(\"Using TMDB API for trending movies\");\n                return response.data.results;\n            } catch (error) {\n                console.warn(\"TMDB API failed, using demo data...\");\n            }\n        }\n        // Final fallback to demo data\n        console.log(\"Using demo data for trending movies\");\n        return DEMO_MOVIES.slice(0, 4);\n    },\n    // Get popular movies\n    getPopularMovies: async function() {\n        let page = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;\n        // Try OMDb API first\n        if (OMDB_API_KEY) {\n            try {\n                const omdbResult = await _alternativeApis__WEBPACK_IMPORTED_MODULE_0__.omdbApi.getPopularMovies(page);\n                if (omdbResult.results.length > 0) {\n                    console.log(\"Using OMDb API for popular movies\");\n                    return omdbResult;\n                }\n            } catch (error) {\n                console.warn(\"OMDb API failed, trying TMDB...\");\n            }\n        }\n        // Fallback to TMDB\n        if (TMDB_API_KEY) {\n            try {\n                const response = await tmdbApi.get(\"/movie/popular\", {\n                    params: {\n                        page\n                    }\n                });\n                console.log(\"Using TMDB API for popular movies\");\n                return response.data;\n            } catch (error) {\n                console.warn(\"TMDB API failed, using demo data...\");\n            }\n        }\n        // Final fallback to demo data\n        console.log(\"Using demo data for popular movies\");\n        return {\n            page: 1,\n            results: DEMO_MOVIES,\n            total_pages: 1,\n            total_results: DEMO_MOVIES.length\n        };\n    },\n    // Get movie details\n    getMovieDetails: async (movieId)=>{\n        // Try OMDb API first\n        if (OMDB_API_KEY) {\n            try {\n                const omdbMovie = await _alternativeApis__WEBPACK_IMPORTED_MODULE_0__.omdbApi.getMovieDetails(movieId);\n                console.log(\"Using OMDb API for movie details\");\n                return omdbMovie;\n            } catch (error) {\n                console.warn(\"OMDb API failed, trying TMDB...\");\n            }\n        }\n        // Fallback to TMDB\n        if (TMDB_API_KEY) {\n            try {\n                const response = await tmdbApi.get(\"/movie/\".concat(movieId));\n                console.log(\"Using TMDB API for movie details\");\n                return response.data;\n            } catch (error) {\n                console.warn(\"TMDB API failed, using demo data...\");\n            }\n        }\n        // Final fallback to demo data\n        const demoMovie = DEMO_MOVIES.find((m)=>m.id.toString() === movieId);\n        if (demoMovie) {\n            console.log(\"Using demo data for movie details\");\n            return {\n                ...demoMovie,\n                genres: [\n                    {\n                        id: 18,\n                        name: \"Drama\"\n                    },\n                    {\n                        id: 80,\n                        name: \"Crime\"\n                    }\n                ],\n                runtime: 142,\n                budget: 25000000,\n                revenue: 16000000,\n                production_companies: [],\n                production_countries: [],\n                spoken_languages: [],\n                status: \"Released\",\n                tagline: \"Demo movie for ALX Movie Nexus\"\n            };\n        }\n        throw new Error(\"Movie not found\");\n    },\n    // Search movies\n    searchMovies: async function(query) {\n        let page = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;\n        // Try OMDb API first\n        if (OMDB_API_KEY) {\n            try {\n                const omdbResult = await _alternativeApis__WEBPACK_IMPORTED_MODULE_0__.omdbApi.searchMovies(query, page);\n                if (omdbResult.results.length > 0) {\n                    console.log(\"Using OMDb API for search\");\n                    return omdbResult;\n                }\n            } catch (error) {\n                console.warn(\"OMDb API search failed, trying TMDB...\");\n            }\n        }\n        // Fallback to TMDB\n        if (TMDB_API_KEY) {\n            try {\n                const response = await tmdbApi.get(\"/search/movie\", {\n                    params: {\n                        query,\n                        page\n                    }\n                });\n                console.log(\"Using TMDB API for search\");\n                return response.data;\n            } catch (error) {\n                console.warn(\"TMDB API search failed, using demo data...\");\n            }\n        }\n        // Final fallback to demo data search\n        console.log(\"Using demo data for search\");\n        const filteredMovies = DEMO_MOVIES.filter((movie)=>movie.title.toLowerCase().includes(query.toLowerCase()));\n        return {\n            page: 1,\n            results: filteredMovies,\n            total_pages: 1,\n            total_results: filteredMovies.length\n        };\n    },\n    // Get movie recommendations\n    getRecommendations: async (movieId)=>{\n        // Try OMDb API first\n        if (OMDB_API_KEY) {\n            try {\n                const omdbRecs = await _alternativeApis__WEBPACK_IMPORTED_MODULE_0__.omdbApi.getRecommendations(movieId);\n                if (omdbRecs.length > 0) {\n                    console.log(\"Using OMDb API for recommendations\");\n                    return omdbRecs;\n                }\n            } catch (error) {\n                console.warn(\"OMDb API recommendations failed, trying TMDB...\");\n            }\n        }\n        // Fallback to TMDB\n        if (TMDB_API_KEY) {\n            try {\n                const response = await tmdbApi.get(\"/movie/\".concat(movieId, \"/recommendations\"));\n                console.log(\"Using TMDB API for recommendations\");\n                return response.data.results;\n            } catch (error) {\n                console.warn(\"TMDB API recommendations failed, using demo data...\");\n            }\n        }\n        // Final fallback to demo data\n        console.log(\"Using demo data for recommendations\");\n        return DEMO_MOVIES.filter((m)=>m.id.toString() !== movieId).slice(0, 4);\n    }\n};\nconst getImageUrl = function(path) {\n    let size = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"w500\";\n    if (path === \"/placeholder-movie.svg\") {\n        return path;\n    }\n    return \"https://image.tmdb.org/t/p/\".concat(size).concat(path);\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils/api.ts\n"));

/***/ })

});